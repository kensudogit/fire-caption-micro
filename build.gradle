plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0' apply false
    id 'io.spring.dependency-management' version '1.1.4' apply false
    id 'org.sonarqube' version '4.4.1.3373' apply false
    id 'jacoco' version '0.8.11' apply false
    id 'checkstyle' version '10.12.5' apply false
    id 'com.github.spotbugs' version '5.2.1' apply false
    id 'org.flywaydb' version '10.8.1' apply false
    id 'com.github.ben-manes.versions' version '0.50.0' apply false
}

allprojects {
    group = 'com.firecaptain'
    version = '1.0.0'
    
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.sonarqube'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'com.github.ben-manes.versions'
    
    java {
        sourceCompatibility = '17'
        targetCompatibility = '17'
    }
    
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        testCompileOnly {
            extendsFrom testAnnotationProcessor
        }
    }
    
    ext {
        springCloudVersion = '2023.0.0'
        mapstructVersion = '1.5.5.Final'
        lombokVersion = '1.18.30'
        jjwtVersion = '0.12.3'
        postgresqlVersion = '42.7.1'
        ehcacheVersion = '3.10.8'
        testcontainersVersion = '1.19.3'
        micrometerVersion = '1.12.0'
        resilience4jVersion = '2.1.0'
    }
    
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        }
    }
    
    dependencies {
        // Spring Boot Starters
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-cache'
        
        // Spring Cloud
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
        implementation 'org.springframework.cloud:spring-cloud-starter-config'
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
        implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
        
        // Monitoring
        implementation "io.micrometer:micrometer-registry-prometheus:${micrometerVersion}"
        implementation "io.micrometer:micrometer-tracing-bridge-brave:${micrometerVersion}"
        
        // Utilities
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        implementation 'org.apache.commons:commons-lang3:3.14.0'
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
        
        // Test dependencies
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.testcontainers:junit-jupiter'
        testImplementation 'org.mockito:mockito-core'
        testImplementation 'org.mockito:mockito-junit-jupiter'
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    }
    
    // Code quality
    checkstyle {
        toolVersion = '10.12.5'
        configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    }
    
    spotbugs {
        toolVersion = '5.2.1'
        effort = 'max'
        reportLevel = 'medium'
        excludeFilter = file("${rootProject.projectDir}/config/spotbugs/exclude.xml")
    }
    
    jacoco {
        toolVersion = '0.8.11'
    }
    
    jacocoTestReport {
        reports {
            xml.required = true
            html.required = true
            csv.required = false
        }
    }
    
    // SonarQube
    sonarqube {
        properties {
            property 'sonar.projectKey', "${project.name}"
            property 'sonar.projectName', project.description ?: project.name
            property 'sonar.host.url', 'http://localhost:9000'
            property 'sonar.java.source', '17'
            property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        }
    }
    
    // Build optimization
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs += ['-parameters']
    }
    
    tasks.withType(Test) {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        forkEvery = 100
    }
}

// 共通タスク
task buildAll {
    dependsOn subprojects.build
    description = 'Build all microservices'
}

task testAll {
    dependsOn subprojects.test
    description = 'Test all microservices'
}

task cleanAll {
    dependsOn subprojects.clean
    description = 'Clean all microservices'
}

task dockerBuildAll {
    dependsOn subprojects.dockerBuild
    description = 'Build Docker images for all microservices'
}
